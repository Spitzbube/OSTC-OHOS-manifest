# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Huawei Inc.

# The workspace pipeline prepares a temporary working directory with the
# combined source tree, prepared by git-repo, and bitbake prepared for
# executing tasks. This workspace is *not* constructed in the default directory
# managed by GitLab, to avoid clashes with a git-repo workflow, it is
# constructed entirely in a temporary directory. There's some logic to store
# and restore the path of that directory (SCRATCH_DIR) between script section
# which run in separate shell processes.
#
# There are two places for integration, apart from the variables that are
# documented below. Adding elements to the "before_script" section can
# customize the workspace before bitbake is initialized. This can be used to
# switch git repositories to other branches, for examples. The "script" section
# initializes bitbake, and allows additional customization, to add or remove
# layers, for example.
#
# Both script section are available as YAML anchors, called workspace-before
# and workspace-do respectively. Keep in mind that GitLab imposes some
# limitation on anchors, so you can reliably only use them one level away, that
# is, in a job that is directly extended by the workspace job. Look at other
# pipelines using this job for inspiration.
#
# This is a pipeline job that is used via the "extends" mechanism below.
# For reference see https://docs.gitlab.com/ee/ci/yaml/README.html
#
# For practical uses see the pipeline definitions for:
# - https://git.ostc-eu.org/OSTC/OHOS/manifest (manifest-wide tests)
# - https://git.ostc-eu.org/OSTC/OHOS/meta-ohos (layer or layer group)
# - https://git.ostc-eu.org/OSTC/OHOS/components/staging/xts_acts (component
#   with existing recipe)
.workspace:
  # This pipeline relies on a container with additional pre-installed software:
  # - git and git-repo program to process the manifest
  # - all of the dependencies of bitbake (basic toolchain, python, many tools)
  # Precise, machine readable description of this container can be found
  # in https://git.ostc-eu.org/OSTC/containers/-/blob/master/ostc-builder/Dockerfile
  image:
    name: registry.ostc-eu.org/ostc/containers/ostc-builder:latest
  # The pipeline relies on being scheduled to a GitLab worker with the
  # following properties:
  # - sufficient amount of disk space (~ 100GB will do).
  # - non-ephemeral disk mounted at /var/shared with even more space (~500GB)
  #   that is shared between runs of this pipeline. This is where the bitbake
  #   download directory and sstate-cache are configured below.
  # - additional CPU cores as the build process is very long.
  tags: [large-disk]
  # Conservative timeout in case the build machine is busy and the cache is cold.
  timeout: 3 hours
  variables:
    # OHOS_MANIFEST_URL - the URL consumed by git-repo. You only want to
    # change this if you forked the entire OHOS infrastructure and want to use
    # it in private.
    OHOS_MANIFEST_URL: https://git.ostc-eu.org/OSTC/OHOS/manifest

    # OHOS_MANIFEST_BRANCH - the name of the git branch of the manifest
    # repository. Normally use "develop" here, which is the default branch.
    # For testing changes coming into the manifest repository itself, use
    # $CI_COMMIT_REF_NAME here.
    OHOS_MANIFEST_BRANCH: develop

    # OHOS_MANIFEST_NAME - the name of the manifest file from the repository
    # mentioned above. The default is "develop.xml" which points to the "tip"
    # of specific branches, unlike "default.xml" which points to a specific
    # commit hash.
    #
    # The develop.xml manifest file is more practical for component-level CI,
    # as it does not require complex synchronization to follow latest versions
    # of layers and other components.  Note that even though layers are
    # up-to-date there, they still contain recipes that point to specific
    # versions, and those need to be handled separately in component-level CI.
    OHOS_MANIFEST_NAME: develop.xml

    # OHOS_BUILD_FLAVOUR - the name of the "flavour" of OpenHarmony, you have
    # to pick "linux", "zephyr" or "freertos". This value has no default and is
    # verified in the "before_script", so any concrete job needs to assign a
    # definite value.
    OHOS_BUILD_FLAVOUR: ""

    # Point to https://example.net instead of the default https://example.com.
    # The OSTC cloud provider has misconfigured DNS which resolves the latter
    # incorrectly.
    OHOS_BB_LOCAL_CONF_CONNECTIVITY_CHECK_URIS: "https://example.net/"

    # OHOS_BUILD_CACHE - set this to either "private" or "pub".
    #
    # By default all builds are assumed to be tainted, and use the private cache.
    # If a given build configuration is not legally problematic, in the sense
    # of pulling in code or blobs that are non-redistributable, this attribute
    # can be set to "pub".
    #
    # Public build cache is exposed as https://cache.ostc-eu.org/ and can be
    # used by third parties to speed up local builds.
    OHOS_BUILD_CACHE: "private"

    # Set DL_DIR and SSTATE_CACHE to either public (pub) or private build
    # cache, depending on the value of $OHOS_BUILD_CACHE. Those are shared
    # among all CI jobs running on the OSTC build cluster. This is what enables
    # efficient builds and avoids (some) network problems that may be
    # encountered when downloading third party source archives.
    OHOS_BB_LOCAL_CONF_DL_DIR: /var/shared/$OHOS_BUILD_CACHE/bitbake/downloads
    OHOS_BB_LOCAL_CONF_SSTATE_DIR: /var/shared/$OHOS_BUILD_CACHE/bitbake/sstate-cache

    # The path of the git repository to deviate from what the git-repo manifest
    # prepares. This effectively allows testing incoming changes that match the
    # repository holding this CI pipeline.
    #
    # The path is relative to the checked out "sources/" directory.
    #
    # This must be set by specific jobs which extend the .build job template.
    OHOS_CI_GIT_REPO_PATH: ""

  before_script: &workspace-before
    # Bitbake requires a non-root user to operate.
    # The container should have a non-root user by default.
    - test "$(id -u)" -ne 0 || (
        echo "precondition failed - this job cannot run as root"
        && exit 1 )

    # Check if the job is configured properly.
    - test -n "$OHOS_BUILD_FLAVOUR" || (
        echo "precondition failed - set OHOS_BUILD_FLAVOUR to \"flavour\" of the build to use (e.g. linux)"
        && exit 1 )

    # Bitbake is configured to use /var/shared/bitbake directory
    # for both the download directory and the sstate-cache.
    - test -w /var/shared/bitbake || (
        echo "precondition failed - expected /var/shared/bitbake to be writable"
        && exit 1 )

    # Log available disk space on the persistent shared disk.
    - df -h /var/shared/bitbake

    - test ! -e "$CI_PROJECT_DIR"/.scratch-dir-name || (
        echo "precondition failed - concurrent modification of $CI_PROJECT_DIR"
        && env | grep CI_ | sort
        && ls -l
        && exit 1 )

    # Create scratch space, being careful not to pollute the working directory.
    # This is done so that we are not attached to the contents of
    # $CI_PROJECT_DIR which contains something that GitLab CI prepared for us.
    - SCRATCH_DIR="$(mktemp -p /tmp -d workspace.XXXXXXXXXX)"
    - echo "$SCRATCH_DIR" > "$CI_PROJECT_DIR"/.scratch-dir-name
    - cd "$SCRATCH_DIR"

    # Create a git-repo workspace with all the files checked out.
    #
    # The checkout uses a mirror that is maintained in a separate pipeline
    # https://git.ostc-eu.org/OSTC/infrastructure/ostc-manifest-mirror Even if
    # the mirror is out-of-date, the sync command succeeds and downloads any
    # delta required. This lowers the load on community servers and our traffic
    # bill.
    - repo init --reference
           /var/shared/pub/git-repo-mirrors/ostc-develop
           --manifest-url "$OHOS_MANIFEST_URL"
           --manifest-name "$OHOS_MANIFEST_NAME"
           --manifest-branch "$OHOS_MANIFEST_BRANCH"
    - time repo sync --no-clone-bundle

    # We subsequently rely on the sources/ directory that must be described by
    # the manifest file.
    - test -d sources || (
        echo "assumption violated - expected the workspace to contain the sources directory"
        && ls "$SCRATCH_DIR"
        && exit 1 )

    # Switch the git repository which is being tested to the revision described
    # by the CI environment variables. This can be used to simulate (future)
    # updates in the manifest.
    #
    # This is applicable to CI for repositories containing layers.
    - |
      if [ -n "$OHOS_CI_GIT_REPO_PATH" ]; then
        echo "CI: Switching $OHOS_CI_GIT_REPO_PATH to $CI_COMMIT_SHA";
        ( cd sources/"$OHOS_CI_GIT_REPO_PATH" && git checkout "$CI_COMMIT_SHA" );
      fi

  script: &workspace-do
    # Reload the value of SCRATCH_DIR set in the before_script phase. Those run
    # in separate shell processes and do not share environment variables.
    - SCRATCH_DIR="$(cat "$CI_PROJECT_DIR"/.scratch-dir-name)"
    - cd "$SCRATCH_DIR"

    # Initialize bitbake build environment by sourcing the oe-init-build-env
    # into the running bash process. This has the side-effect of changing the
    # current working directory and populating the $SCRATCH_DIR/build
    # sub-directory with default configuration.
    - TEMPLATECONF=../sources/meta-ohos/flavours/"$OHOS_BUILD_FLAVOUR"
        . ./sources/poky/oe-init-build-env build
    # xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    # NOTE: From now on, we are running inside "$SCRATCH_DIR"/build
    # with bash modified by oe-init-build-env. We now have access to bitbake,
    # devtool and other related tools.
    # xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

    # Generic local.conf customization point. All environment variables with a
    # given prefix are converted to local.conf variables, with the prefix
    # dropped. Some extra sed processing is used to quote the variables.
    # Everything runs in a sub-shell with bash pipefail disabled, as otherwise
    # lack of variables matching the grep pattern causes the execution to stop.
    - |
      ( set +o pipefail;
        env \
          | grep -E '^OHOS_BB_LOCAL_CONF_[A-Z_0-9]+=' \
          | sed -e 's/^OHOS_BB_LOCAL_CONF_//g' -e 's/"/\\"/g' -e 's/=/ = "/g' -e 's/$/"/g' \
          | sort \
          | tee -a conf/local.conf )
      ( set +o pipefail;
        env \
          | grep -E '^OHOS_BB_LOCAL_CONF_plus_equals_[A-Z_0-9]+=' \
          | sed -e 's/^OHOS_BB_LOCAL_CONF_plus_equals_//g' -e 's/"/\\"/g' -e 's/=/ += "/g' -e 's/$/"/g' \
          | sort \
          | tee -a conf/local.conf )

  after_script:
    # If the primary script failed early enough, the scratch dir may not have
    # been created yet. Check for that to avoid confusing errors.
    - test -f "$CI_PROJECT_DIR"/.scratch-dir-name || exit 0
    # Reload the value of SCRATCH_DIR set in the before_script phase.
    - SCRATCH_DIR="$(cat "$CI_PROJECT_DIR"/.scratch-dir-name)"
    # Collect stats after the build.
    - du -sh "$SCRATCH_DIR"/build/* || true
    # Clean up after ourselves.
    - rm -f "$CI_PROJECT_DIR"/.scratch-dir-name
    - rm -rf "$SCRATCH_DIR"

.build:
  # Extend the workspace job. This effectively gives us an assembled tree and
  # initialized bitbake. Some essential variables are defined in later jobs,
  # like .build-linux, which sets OHOS_BUILD_FLAVOUR, which is inherited from
  # the .workspace job.
  extends: .workspace
  stage: build
  # Conservative timeout in case the build machine is busy and the cache is cold.
  timeout: 3 hours
  variables:
    # Name of the bitbake recipe to build. This must be set by specific jobs
    # which extend the .build job template.
    OHOS_RECIPE_NAME: ""
    # Set to non-empty value to accept Freescale EULA.
    OHOS_ACCEPT_FSL_EULA: ""
  before_script:
    # Check if the job is configured properly.
    - test -n "$OHOS_RECIPE_NAME" || (
        echo "precondition failed - set OHOS_RECIPE_NAME to the name of the recipe to build"
        && exit 1 )
    - !reference [.workspace, before_script]
  script:
    - !reference [.workspace, script]
    # Build the desired recipe.
    - time bitbake "$OHOS_RECIPE_NAME"
    # Move artifacts for recovery, which only considers $CI_PROJECT_DIR and
    # subdirectories.
    - mkdir -p "$CI_PROJECT_DIR"/artifacts
    # The name of the build-specific tmp directory may vary. Ask bitbake
    # instead of hard-coding it. This is currently only relevant for Zephyr,
    # which uses tmp-newlib.
    - eval "$(bitbake -e | grep ^TMPDIR= | sed -e 's/^TMPDIR/BITBAKE_TMPDIR/g')"
    - mv "$BITBAKE_TMPDIR"/deploy/images/ "$CI_PROJECT_DIR"/artifacts || true
    - mv "$BITBAKE_TMPDIR"/deploy/licenses/ "$CI_PROJECT_DIR"/artifacts || true
    # TODO: copy all build logs as well.
  artifacts:
    paths:
      - artifacts/
  rules:
    # Run the build when a merge request is created.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
