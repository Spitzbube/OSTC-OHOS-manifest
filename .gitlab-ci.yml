# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Huawei Inc.

stages:
  - compliance
  - build
  - test
  - deploy
  - report

include:
 - project: 'OSTC/infrastructure/pipelines'
   file:
    # Include shared IP compliance jobs
    - 'dco.yaml'
    - 'reuse.yaml'
 # TODO: merge this into one file, for simplicity.
 # Include the generic .workspace and .build jobs.
 - local: '/.ostc-ci/build-generic.yaml'
 # Include the set of build flavours.
 - local: '/.ostc-ci/build-flavours.yaml'
 # Include the set of jobs using the default manifest.
 - local: '/.ostc-ci/default-targets.yaml'
 # Include the generic .spread and .lava jobs.
 - local: '/.ostc-ci/test-generic.yaml'

dco:
  extends: .dco

reuse:
  extends: .reuse

# Customize the .bitbake-workspace job, included from build-generic.yaml above,
# with an unique set of rules that enable the job
.bitbake-workspace:
  rules:
    # Run the build when it is scheduled.
    - if: $CI_PIPELINE_SOURCE == "schedule"
    # Do not run pipelines for draft merge requests unless manually triggered.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^(wip|draft):.*/i'
      when: manual
    # Run the build when a merge request is created and the corresponding
    # manifest is modified. Or when the pipeline definition, or its components,
    # are changed.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $OHOS_MANIFEST_NAME
        - .gitlab-ci.yml
        - .ostc-ci/*.yaml
      # When building a merge request substitute the OHOS_MANIFEST_URL to point
      # to the incoming repository, and OHOS_MANIFEST_BRANCH, to the right
      # branch name. This allows testing the changes coming into project. This
      # is done here, so that it does not clobber scheduled pipelines.
      variables:
        OHOS_MANIFEST_URL: "$CI_MERGE_REQUEST_SOURCE_PROJECT_URL"
        OHOS_MANIFEST_BRANCH: "$CI_COMMIT_REF_NAME"
    # Run the build when a tag is placed.
    - if: '$CI_COMMIT_TAG'
  artifacts:
    # Disable collection of image artifacts. They are not used here and they
    # are expensive to upload and store.
    paths: []

# Perform scheduled builds with glibc instead of musl.
linux-glibc-qemu-x86_64:
  extends: linux-qemu-x86_64
  variables:
    # This appends TCLIBC = "glibc" to conf/local.conf and interacts with
    # meta-ohos-core layer.
    # https://git.ostc-eu.org/OSTC/OHOS/meta-ohos/-/blob/develop/meta-ohos-core/conf/distro/openharmony-linux.conf#L11
    OHOS_BB_LOCAL_CONF_TCLIBC: glibc
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

# Build documentation present in the repository.
build-docs:
  extends: .build-docs

# Trigger aggregation of All Scenario OS documentation.
aggregate-docs:
  extends: .aggregate-docs
  needs: [build-docs]

##
## Submit jobs to LAVA
##
lava-qemu-x86_64:
  needs: [linux-qemu-x86_64]
  stage: test
  extends: .lava-test
  variables:
    CI_LAVA_JOB_DEFINITION: "https://git.ostc-eu.org/OSTC/infrastructure/lava/lava-config/-/raw/master/lava.ostc-eu.org/job-definitions/ci/qemu-x86_64-acts.yaml"
    CI_BUILD_JOB_NAME: linux-qemu-x86_64
    CI_REPORT_JOB_NAME: lava-report

lava-qemu-x86:
  needs: [linux-qemu-x86]
  stage: test
  extends: .lava-test
  variables:
    CI_LAVA_JOB_DEFINITION: "https://git.ostc-eu.org/OSTC/infrastructure/lava/lava-config/-/raw/master/lava.ostc-eu.org/job-definitions/ci/qemu-x86-acts.yaml"
    CI_BUILD_JOB_NAME: linux-qemu-x86
    CI_REPORT_JOB_NAME: lava-report

lava-zephyr-96b-nitrogen:
  needs: [zephyr-96b-nitrogen]
  stage: test
  extends: .lava-test
  variables:
    CI_LAVA_JOB_DEFINITION: "https://git.ostc-eu.org/OSTC/infrastructure/lava/lava-config/-/raw/master/lava.ostc-eu.org/job-definitions/ci/nitrogen-boot.yaml"
    CI_BUILD_JOB_NAME: zephyr-96b-nitrogen
    CI_REPORT_JOB_NAME: lava-report

##
## Get the results back from LAVA.
##
lava-report:
  needs: [lava-qemu-x86_64, lava-qemu-x86, zephyr-96b-nitrogen]
  extends: .lava-report
